#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>

using namespace std;

// We only consider the following minearl phases generated by Perplx code
// Mineral Phases and their Full Names
    // Short Name       | Full Name
    // -----------------|-----------------------------------------
    // ol               | Olivine
    // opx              | Orthopyroxene
    // cpx              | Clinopyroxene
    // stv              | Stishovite
    // c2c              | High-pressure Mg-rich Clinopyroxene
    // gt               | Garnet
    // wad              | Wadsleyite
    // ring             | Ringwoodite
    // aki              | Akimotoite
    // ca-pv            | Calcium Silicate Perovskite
    // fp               | Ferropericlase
    // pv               | Bridgemanite (formerly Perovskite)
    // cf               | Calcium Ferrite

// Function to calculate the conductivity based on Yoshino's or Karato's formula
// mineral_volume_percentages matrix format: 
// [Pressure (Bar), Temperature (K), ol, opx, cpx, stv, C2/c, gt, wad, ring, aki, ca-pv, fp, pv, cf]
    
   
// Function to calculate the bulk conductivity based on Yoshino's or Karato's formulas
void calculate_bulk_conductivity(const string& group_name, const vector<vector<double>>& mineral_volume, 
                                  double cw_ol, double cw_wad, vector<double>& bulk_conductivity)
{    
    int n_rows = mineral_volume.size();
    int n_columns = mineral_volume[0].size();
    assert(n_columns == 15);  // Ensure we have the expected number of columns
    
    bulk_conductivity.clear();
    bulk_conductivity.resize(n_rows);  // Resize the output vector to store results

    vector<vector<double>> mineral_sigma(n_rows, vector<double>(13, 0.0));  // Initialize the mineral_sigma matrix

    // Constants for water solution capability ratio
    const double d_cw_wad_ring = 2;
    const double d_cw_opx_ol = 1;  // Placeholder constant, fix later if necessary
    double cw_opx = cw_ol * d_cw_opx_ol;
    double cw_ring = cw_wad / d_cw_wad_ring;

    if(group_name == "yoshino") {
        const double olivine_Xfe = 0.1;
        const double wad_Xfe = 0.1;
        const double ring_Xfe = 0.1;

        for(int i = 0; i < n_rows; ++i) {
            double T = mineral_volume[i][1];  // Temperature (Column 1)
            double P = mineral_volume[i][0];  // Pressure (Column 0)
           
            mineral_sigma[i][0] = Yoshino_olivine_conductivity(T, cw_ol, olivine_Xfe);
            mineral_sigma[i][1] = Yoshino_orthopyroxene_conductivity(T, cw_opx, P);
            mineral_sigma[i][2] = Yoshino_clinopyroxene_conductivity(T, cw_opx, P);
            mineral_sigma[i][3] = Yoshino_stishovite_conductivity(T, cw_opx, P);
            mineral_sigma[i][4] = Yoshino_C2c_conductivity(T, 0.0, P);
            mineral_sigma[i][5] = Yoshino_garnet_conductivity(T, cw_opx, P);
            mineral_sigma[i][6] = Yoshino_wadsleyite_conductivity(T, cw_wad, wad_Xfe);
            mineral_sigma[i][7] = Yoshino_ringwoodite_conductivity(T, cw_ring, ring_Xfe);
            mineral_sigma[i][8] = Yoshino_akimotoite_conductivity(T, 0.0, P);
            mineral_sigma[i][9] = Yoshino_ca_pv_conductivity(T, 0.0, P);
            mineral_sigma[i][10] = Yoshino_ferropericlase_conductivity(T, 0.0, P);
            mineral_sigma[i][11] = Yoshino_Perovskite_conductivity(T, 0.0, P);
            mineral_sigma[i][12] = 0.0;  // Placeholder for additional minerals if needed
        }
    } else if(group_name == "karato") {
        const double olivine_Xfe = 0.1;
        const double wad_Xfe = 0.1;
        const double ring_Xfe = 0.1;

        for(int i = 0; i < n_rows; ++i) {
            double T = mineral_volume[i][1];  // Temperature (Column 1)
            double P = mineral_volume[i][0];  // Pressure (Column 0)
           
            mineral_sigma[i][0] = Karato_olivine_conductivity(T, cw_ol, P);
            mineral_sigma[i][1] = Karato_orthopyroxene_conductivity(T, cw_opx, P);
            mineral_sigma[i][2] = 0.0;  // Placeholder
            mineral_sigma[i][3] = 0.0;  // Placeholder
            mineral_sigma[i][4] = 0.0;  // Placeholder
            mineral_sigma[i][5] = Karato_garnet_conductivity(T, 0.0, P);
            mineral_sigma[i][6] = Karato_wadsleyite_conductivity(T, cw_wad, P);
            mineral_sigma[i][7] = Karato_ringwoodite_conductivity(T, cw_ring, P);
            mineral_sigma[i][8] = 0.0;  // Placeholder
            mineral_sigma[i][9] = 0.0;  // Placeholder
            mineral_sigma[i][10] = 0.0;  // Placeholder
            mineral_sigma[i][11] = 0.0;  // Placeholder
            mineral_sigma[i][12] = 0.0;  // Placeholder
        }
    }
    
    // Now mineral_sigma and mineral_volume are ready
    // Compute the bulk conductivity by calling compute_sigma_sc
    for(int i = 0; i < n_rows; ++i) {
        vector<double> x_i(mineral_volume[i].begin() + 2, mineral_volume[i].end());  // Volume fractions starting from index 2
        bulk_conductivity[i] = compute_sigma_sc(x_i, mineral_sigma[i]);
    }
}