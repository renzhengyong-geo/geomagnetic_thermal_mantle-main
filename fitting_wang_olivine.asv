% Given data
Cw = [0.027, 0.027, 0.080, 0.060, 0.019, 0.019, 0.019, 0.019, 0.013, 0.013, 0.013, 0.013, 0.010, 0.010, 0.010, 0.010, 0.010]; % Water Content (wt%)
T = [960, 1273, 881, 873, 1273, 1073, 973, 873, 1286, 1171, 1068, 963, 1273, 1173, 1073, 973, 873]; % Temperature (K)
s = [0.0025, 0.0386, 0.0010, 0.0009, 0.0273, 0.0032, 0.0014, 0.0004, 0.0133, 0.0055, 0.0026, 0.0007, 0.0108, 0.0060, 0.0036, 0.0017, 0.0004]; % Conductivity (S/m)

% Gas constant R in J/(mol·K)
R = 8.314;

loglog(Cw, s, 'o', 'DisplayName', 'Observed Data');  % Plot observed data
A = 10^(3.0);
r = 0.62;
H = 87*1000;

hold on;
t=1273;
X=logspace(-3, 0, 50); 
Y=A.*X.^(r)*exp(-H/(Rt));
loglog(X, Y1, 'o', 'DisplayName', 'Observed Data');  % Plot observed data

hold on;
t=1;
X=logspace(-3, 0, 50); 
Y=A.*X.^(r)*exp(-H/(Rt));
loglog(X, Y1, 'o', 'DisplayName', 'Observed Data');  % Plot observed data


% Define the conductivity model function
model = @(params, Cw) params(1) * Cw.^params(2) .* exp(-params(3) ./ (R * T)); 

% Initial guess for A, r, and H
initial_guess = [1e-3, 1, 10000];  % Initial estimates for A, r, and H

% Fitting the model using non-linear least squares (Levenberg-Marquardt)
options = optimset('Display', 'off');  % Turn off optimization output
[params_fit,~,~,exitflag,output] = lsqcurvefit(model, initial_guess, Cw, s, [], [], options);

% Extract the fitted parameters A, r, H
A_fit = params_fit(1);
r_fit = params_fit(2);
H_fit = params_fit(3);

% Calculate the covariance matrix
% Using Jacobian matrix for covariance estimation
[~, J] = model(params_fit, Cw);  % Get the Jacobian
cov_matrix = inv(J' * J) * output.resnorm;  % Covariance matrix (approximated)
param_uncertainties = sqrt(diag(cov_matrix));  % Uncertainties for A, r, H

% Output the fitted parameters and uncertainties
fprintf('A = %.4e ± %.4e\n', A_fit, param_uncertainties(1));
fprintf('r = %.4f ± %.4f\n', r_fit, param_uncertainties(2));
fprintf('H = %.4f ± %.4f\n', H_fit, param_uncertainties(3));

% Plot the results
Cw_fit = linspace(min(Cw), max(Cw), 100);  % Generate values for Cw to plot the fitted curve
s_fit = model(params_fit, Cw_fit);  % Evaluate the fitted model

% Plot observed data and fitted curve
figure;
loglog(Cw, s, 'o', 'DisplayName', 'Observed Data');  % Plot observed data
hold on;
loglog(Cw_fit, s_fit, '-', 'DisplayName', 'Fitted Curve');  % Plot fitted curve

% Labels and title
xlabel('Water Content (Cw) [wt%]');
ylabel('Conductivity (s) [S/m]');
title('Log-Log Plot of Conductivity vs Water Content');
legend;
grid on;
hold off;
